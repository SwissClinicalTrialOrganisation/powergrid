% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/findtarget.R
\name{FindTarget}
\alias{FindTarget}
\title{Find Target Power or Other Value}
\usage{
FindTarget(
  power_slice,
  target = 0.9,
  minimal_target = TRUE,
  search_par = "n",
  find_min = TRUE,
  method = "step"
)
}
\arguments{
\item{power_slice}{A 2- or 1- dimensional array, most commonly the result of
taking a slice of an object of class \code{power_array} using
\code{array_slicer}.}

\item{target}{The required size of the value in the power_slice}

\item{minimal_target}{Is the target a minimum (e.g., for power) or a maximum
(e.g., the size of a confidence interval)}

\item{search_par}{Which parameter should be searched to achieve the required
target. In the standard SSE case, this is n.}

\item{find_min}{Should the lowest value of search_par be found that yields a
value that meets the target. For n, one searches the lowest, but for,
e.g. the variance, one would search for the maximum where the target can
still be achieved.}

\item{method}{How is the required \code{search_par} to achieve \code{target}
found. Either \code{'step'}: walking in steps along \code{search_par} or
\code{'lm'}: Interpolating assuming a linear relation between
\code{search_par} and \code{(qnorm(x) + qnorm(1 - 0.05)) ^ 2}. Setting
'lm' is inspired on the implementation in the sse package by Thomas
Fabbro.}
}
\value{
Returns the lowest (or highest if \code{find_min} == FALSE) value of
\code{search_par} for which the value in \code{power_slice} is at minimum
(or maximum if \code{minimal_target} == FALSE) of value \code{target}. If
\code{method} == 'lm', interpolation through transformation is used.
}
\description{
Function developed for internal use in powergrid::Example. Search
2-dimensional slice of a power_array object, for a value of at least (or at
most) a chosen value, searching along one dimension of the slice in a chosen
direction, per level of the other dimension. Typically, one searches for a
power of at least x\% along increasing sample size, thus finding the minimal
n for achieving a power of x, per level of another parameter, e.g., effect
size.
}
\details{
By default, the power_slice is searched along the dimension n
(\code{search_par}), searching for the lowest value (\code{find_min} = TRUE)
where the array contains a value of at least (\code{minimal_target} = TRUE)
.9 (the \code{target}), thus finding the minimal sample size required to
achieve a power of 90\%. These arguments may seem a bit confusing at first,
but they allow for three additional purposes:

First, the implementation also allows to search for a value that is \emph{at
most} the \code{target}, by setting \code{minimal_target} to FALSE. This may
be used, for example, when the aim is to find a sample size yielding a
confidence interval that is not bigger than some maximum width.

Second, the implementation allows to search along another \emph{named} dimension
of the power_slice than n.

Third, the implementation allows to search for a certain target to be
achieved by maximizing (find_minimum = FALSE) the parameter on the searched
dimension. This may be used, for example, when the aim is to find the
maximum standard deviation at which a study's power is still acceptable.

\code{FindTarget} may most often be implicitly called inside \code{Example},
\code{plot} or \code{PowerLinesPlot}.
}
\examples{
## ============================================
## most basic case, power function available:
## ============================================
sse_pars = list(
    n = seq(from = 10, to = 60, by = 2),
    delta = seq(from = 0.5, to = 1.5, by = 0.2), ## effect size
    sd = seq(.1, .9, .2)) ## Standard deviation
PowFun <- function(n, delta, sd){
  ptt = power.t.test(n = n/2, delta = delta, sd = sd,
                     sig.level = 0.05)
  return(ptt$power)
}
power_array = PowerGrid(pars = sse_pars, fun = PowFun, n_iter = NA)
ex_out = Example(power_array,
                 example = list(delta = .7, sd = .7),
                 target = .9)
ex_out
}
\author{
Gilles Dutilh
}
